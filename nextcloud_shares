#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Plugin to monitor the amount shares to and from the specified nextcloud instance
#
# Parameters understood:
#     config   (required)
#     autoconf (optional - used by munin-config)

# Magic markers - optional - used by installation scripts and
# munin-config:
#
#  #%# family=manual
#  #%# capabilities=autoconf
import re
import requests
import sys
import os


class NextcloudShares:
	def config(self):
		config = {
			'shares': [
				'graph_title Nextcloud Shares',
				'graph_args --base 1024 -l 0',
				'graph_vlabel number of shares',
				'graph_info graph showing the number of shares',
				'graph_category nextcloud',
				'num_fed_shares_received.label federated shares recieved',
				'num_fed_shares_received.info current total of federated shares recieved',
				'num_fed_shares_sent.label federated shares sent',
				'num_fed_shares_sent.info current total of federated shares sent',
				'num_shares.label total number of shares',
				'num_shares.info current over all total of shares',
				'num_shares_groups.label group shares',
				'num_shares_groups.info current total of group shares',
				'num_shares_link.label link shares',
				'num_shares_link.info current total of shares through a link',
				'num_shares_link_no_password.label link shares without a password',
				'num_shares_link_no_password.info current total of shares through a link without a password protection',
				'num_shares_user.label user shares',
				'num_shares_user.info current total of user shares'
			]
		}

		return config

	def get_data(self, api_response):
		data ={
			'nextcloud_shares': [],
		}
		shares = api_response['ocs']['data']['nextcloud']['shares']

		# use regex to remove permission stats from api response
		reg = re.compile("num.*")
		share_keys = shares.keys()
		sharelist = list(filter(reg.match, share_keys))

		for key in sharelist:
			data['nextcloud_shares'].append(str(key) + ".value " + str(shares[key]))

		return data

	def run(self):
		# read the configuration from munin environment
		URL = os.environ['url']
		auth = (os.environ['username'], os.environ['password'])

		# init requests session with specific header and credentials
		with requests.Session() as s:
			s.auth = auth
			s.headers.update({'Accept': 'application/json'})
			s.stream = False

			# request data from api
			r = s.get(URL)

		# if status code is successful close connection and continue
		if r.status_code == 200:
			s.close()
			api_response = r.json()

			result = self.get_data(api_response)

			for key in result.keys():
				print('\n'.join(result[key]))

		elif r.status_code == 996:
			print('server error')
		elif r.status_code == 997:
			print('not authorized')
		elif r.status_code == 998:
			print('not found')
		else:
			print('unknown error')

	def main(self):
		if (sys.argv.__len__() == 2) and (sys.argv[1] == "config"):
			for key in self.config().keys():
				print('\n'.join(self.config()[key]))
			try:
				if os.environ['MUNIN_CAP_DIRTYCONFIG'] == '1':
					self.run()
			except KeyError:
				pass

		elif (sys.argv.__len__() == 2) and (sys.argv[1] == 'autoconf'):
			# check host if env variables are set
			try:
				if None not in {os.environ['url'], os.environ['username'], os.environ['password']}:
					print('yes')
			except KeyError:
				print('no env configuration options are missing')
		else:
			self.run()


if __name__ == "__main__":
	NextcloudShares().main()
	quit(0)
