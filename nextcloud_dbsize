#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Plugin to monitor the nextcloud database size
#
# Parameters understood:
#     config   (required)
#     autoconf (optional - used by munin-config)

# Magic markers - optional - used by installation scripts and
# munin-config:
#
#  #%# family=manual
#  #%# capabilities=autoconf
import requests
import sys
import os


class NextcloudDB:
	def config(self):
		config = {
			'dbsize': [
				'graph_title Nextcloud Database Size',
				'graph_args --base 1024 -l 0',
				'graph_vlabel size in byte',
				'graph_info graph showing the database size in byte',
				'graph_category nextcloud',
				'db_size.label database size in byte',
				'db_size.info users connected in the last 5 minutes',
				'db_size.draw AREA',
				'db_size.min 0'
			]
		}

		return config

	def get_data(self, api_response):
		data ={
			'nextcloud_dbsize': [],
		}

		dbsize = api_response['ocs']['data']['server']['database']['size']
		data['nextcloud_dbsize'].append('db_size.value %s' % dbsize)

		return data

	def run(self):
		# init requests session with specific header and credentials
		with requests.Session() as s:
			# read credentials from env
			s.auth = (os.environ.get('username'), os.environ.get('password'))

			# update header for json
			s.headers.update({'Accept': 'application/json'})

			# request the data
			r = s.get(os.environ.get('url'))

			# if status code is successful continue
			if r.status_code == 200:
				api_response = r.json()
				result = self.get_data(api_response)

				for key in result.keys():
					print('\n'.join(result[key]))

			elif r.status_code == 996:
				print('server error')
			elif r.status_code == 997:
				print('not authorized')
			elif r.status_code == 998:
				print('not found')
			else:
				print('unknown error')

	def main(self):
		# check if first argument is config or autoconf if not fetch data
		if sys.argv.__len__() >= 2:
			if sys.argv[1] == "config":
				for key in self.config().keys():
					print('\n'.join(self.config()[key]))
				if os.environ.get('MUNIN_CAP_DIRTYCONFIG') == '1':
					self.run()
			elif sys.argv[1] == 'autoconf':
				if None in [os.environ.get('username'), os.environ.get('password')]:
					print('env variables are missing')
				else:
					print('yes')
		else:
			self.run()


if __name__ == "__main__":
	NextcloudDB().main()
	quit(0)
