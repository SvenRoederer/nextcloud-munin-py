#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Plugin to monitor the amount of users sucessfully logging in to the specified nextcloud instance
#
# Parameters understood:
#     config   (required)
#     autoconf (optional - used by munin-config)

# Magic markers - optional - used by installation scripts and
# munin-config:
#
#  #%# family=manual
#  #%# capabilities=autoconf
import requests
import sys
import os


class NextcloudUsers:
	def config(self):
		config = {
			'users': [
				'graph_title Nextcloud User Activity',
				'graph_args --base 1024 -l 0',
				'graph_printf %.0lf',
				'graph_vlabel connected users',
				'graph_info graph showing the number of connected user',
				'graph_category nextcloud',
				'last5minutes.label last 5 minutes',
				'last5minutes.info users connected in the last 5 minutes',
				'last1hour.label last hour',
				'last1hour.info users connected in the last hour',
				'last24hours.label last 24 hours',
				'last24hours.info users connected in the last 24 hours'
			]
		}

		return config

	def get_data(self, api_response):
		data ={
			'nextcloud_users': [],
		}
		users  = api_response['ocs']['data']['activeUsers']

		for key in users.keys():
			data['nextcloud_users'].append(str(key) + ".value " + str(users[key]))

		return data

	def run(self):
		# read the configuration from munin environment
		URL = os.environ['url']
		auth = (os.environ['username'], os.environ['password'])

		# init requests session with specific header and credentials
		with requests.Session() as s:
			s.auth = auth
			s.headers.update({'Accept': 'application/json'})
			s.stream = False

			# request data from api
			r = s.get(URL)

		# if status code is successful close connection and continue
		if r.status_code == 200:
			s.close()
			api_response = r.json()

			result = self.get_data(api_response)

			for key in result.keys():
				print('\n'.join(result[key]))

		elif r.status_code == 996:
			print('server error')
		elif r.status_code == 997:
			print('not authorized')
		elif r.status_code == 998:
			print('not found')
		else:
			print('unknown error')

	def main(self):
		if (sys.argv.__len__() == 2) and (sys.argv[1] == "config"):
			for key in self.config().keys():
				print('\n'.join(self.config()[key]))
			try:
				if os.environ['MUNIN_CAP_DIRTYCONFIG'] == '1':
					self.run()
			except KeyError:
				pass

		elif (sys.argv.__len__() == 2) and (sys.argv[1] == 'autoconf'):
			# check host if env variables are set
			try:
				if None not in {os.environ['url'], os.environ['username'], os.environ['password']}:
					print('yes')
			except KeyError:
				print('no env configuration options are missing')
		else:
			self.run()


if __name__ == "__main__":
	NextcloudUsers().main()
	quit(0)
