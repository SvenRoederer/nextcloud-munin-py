#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Plugin to monitor the number of available nextcloud app updates
#
# Parameters understood:
#     config   (required)
#     autoconf (optional - used by munin-config)

# Magic markers - optional - used by installation scripts and
# munin-config:
#
#  #%# family=manual
#  #%# capabilities=autoconf
import requests
import sys
import os


class NextcloudApps:
	def config(self):
		config = {
			'apps': [
				'graph_title Nextcloud available App updates',
				'graph_args --base 1024 -l 0',
				'graph_vlabel updates available',
				'graph_info graph showing the number of available app updates',
				'graph_category nextcloud',
				'num_updates_available.label available app updates',
				'num_updates_available.info number of available app updates'
			]
		}

		return config

	def get_data(self, api_response):
		data ={
			'nextcloud_available_updates': []
		}

		# precaution for Nextcloud versions prior to version 14
		try:
			num_updates_available = api_response['ocs']['data']['nextcloud']['system']['apps']['num_updates_available']
			data['nextcloud_available_updates'].append('num_updates_available.value %s' % num_updates_available)
		except KeyError:
			return False

		return data

	def run(self):
		# read the configuration from munin environment
		URL = os.environ['url']
		auth = (os.environ['username'], os.environ['password'])

		# init requests session with specific header and credentials
		with requests.Session() as s:
			s.auth = auth
			s.headers.update({'Accept': 'application/json'})
			s.stream = False

			# request data from api
			r = s.get(URL)

		# if status code is successful close connection and continue
		if r.status_code == 200:
			s.close()
			api_response = r.json()

			result = self.get_data(api_response)

			for key in result.keys():
				print('\n'.join(result[key]))

		elif r.status_code == 996:
			print('server error')
		elif r.status_code == 997:
			print('not authorized')
		elif r.status_code == 998:
			print('not found')
		else:
			print('unknown error')

	def main(self):
		if (sys.argv.__len__() == 2) and (sys.argv[1] == "config"):
			for key in self.config().keys():
				print('\n'.join(self.config()[key]))
			try:
				if os.environ['MUNIN_CAP_DIRTYCONFIG'] == '1':
					self.run()
			except KeyError:
				pass

		elif (sys.argv.__len__() == 2) and (sys.argv[1] == 'autoconf'):
			# check host if env variables are set
			try:
				if None not in {os.environ['url'], os.environ['username'], os.environ['password']}:
					print('yes')
			except KeyError:
				print('no env configuration options are missing')
		else:
			self.run()


if __name__ == "__main__":
	NextcloudApps().main()
	quit(0)
